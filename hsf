install.packages("VIM")     
install.packages("caret")   
install.packages("RANN")
library(VIM)
library(caret)
library(RANN)


# Create a new dataset that includes credit_history & data$class - k-Nearest Neighbors(KNN) requirement
df <- data.frame(credit_hist=data$credit_history,credit_class=data$class)

# Set k value - number of neighbors for KNN
k_value <- 10 

# Ensure that credit_hist is a factor - KNN requirement
df$credit_hist <- as.factor(df$credit_hist)

# KNN Imputation
A_imputed_vim <- kNN(df, variable = "credit_hist", k = k_value)

# Print the imputed data
print(A_imputed_vim[A_imputed_vim$credit_hist_imp==TRUE,])

# Updated the imputed data to the original datasets
data$credit_history <- A_imputed_vim$credit_hist

# Remove temporary variables 
df=NULL
A_imputed_vim=NULL

# Result:The KNN function is used to replace NA with the most frequent value (mode) among its 10 neighbours (k value)




###########################################################################################################################



# Create a new dataset that includes the age & employment data
df_1 <- data.frame(age = data$age, years_of_employment = data$employment)

# create a function to categorize employment years under different conditions 
categorize_employment_years <- function(years) {
  if (is.na(years)) {
    return(NA)
  } else if (years == "unemployed") {
    return("Unemployment")
  } else if (years == "<1") {
    return("0 to 1 year")
  } else if (years == "1<=X<4") {
    return("1 to 4 years")
  } else if (years == "4<=X<7") {
    return("4 to 7 years")
  } else if (years == ">=7") {
    return("More than 7 years")  # Only keep this if it's relevant
  }
}

# Use the sapply function to apply the categorize_employment_years function to years_of_employment and results will be shown in a new column 
df_1$employment_category <- sapply(df_1$years_of_employment, categorize_employment_years)

# Function for manual hot deck imputation - to replace NA in data$age
hot_deck_imputation <- function(df_1) {
  
  # Use the which function to identify missing values in the age column
  missing_v <- which(is.na(df_1$age))
  
  # For each missing value in index(age), find donors with similar characteristics
  for (index in missing_v) {
    
    # Filter out rows with non-missing values for years_of_employment
    donors <- df_1[!is.na(df_1$years_of_employment), ]
    
    # Check if there are valid donors available
    if (nrow(donors) == 0) {
      next
    }
    
    # Randomly select a donor based on their years_of_employment
    donor_row <- donors[sample(nrow(donors), 1), ]
    
    # Impute the missing value by mean in the age column based on the donor's years_of_employment
    if (donor_row$years_of_employment == "unemployed") {
      df_1$age[index] <- floor(mean(data$age[data$employment == "unemployed"], na.rm = TRUE))
    # Combine "<1", "1<=X<4", "4<=X<7" as they have similar mean 
    } else if (donor_row$years_of_employment == "<1" | donor_row$years_of_employment == "1<=X<4" | donor_row$years_of_employment == "4<=X<7") {
      df_1$age[index] <- floor(mean(data$age[data$employment == "<1"], na.rm = TRUE))           
    } else if (donor_row$years_of_employment == ">=7") {
      df_1$age[index] <- floor(mean(data$age[data$employment == ">=7"], na.rm = TRUE))
    }
  }
  
  return(df_1)
}


# Perform manual hot deck imputation for the data$age column based on data$years_of_employment
imputed_data_manual <- hot_deck_imputation(df_1)

# Print the imputed dataset
print(imputed_data_manual)

# Replace original data with imputed data
data$age = floor(imputed_data_manual$age)


# Validate age based on their employment duration (A$employment)
# Assume that individuals above 15 years old can become workers(employed).
summary(data$age)   

# Min age is 19 means that it fulfil the conditions as a employee within the year range of "<1" or "1<=X<4" or "unemployed".
sum(data$age==19 & data$employment==">=7")
sum(data$age==19 & data$employment=="4<=X<7")
# Age 20 start can fulfil the conditions as a employee within the year range of "4<=X<7"
sum(data$age==20 & data$employment==">=7")    
sum(data$age==21 & data$employment==">=7")
sum(data$age==22 & data$employment==">=7")
# Age 23 start can fulfil the conditions as a employee within the year range of "4<=X<7"



library(dplyr)

# Replace invalid values in data$age to the first quantile of age

data <- data %>%
  mutate(age = case_when(
    age == 19 & employment == ">=7" ~ quantile(data$age, 0.25),
    age == 19 & employment == "4<=X<7" ~ quantile(data$age, 0.25),
    age == 20 & employment == ">=7" ~ quantile(data$age, 0.25),
    age == 21 & employment == ">=7" ~ quantile(data$age, 0.25),
    age == 22 & employment == ">=7" ~ quantile(data$age, 0.25),
    TRUE ~ age         # Keep other values unchanged
  ))


# Remove temporary variables 
imputed_data_manual=NULL
df_1=NULL

